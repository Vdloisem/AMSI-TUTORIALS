{"title":"Introduction to Modelling","markdown":{"yaml":{"title":"Introduction to Modelling"},"headingText":"The Central Challenge: Managing Complexity","containsRefs":false,"markdown":"\n\nThis chapter introduces the principles of modelling in the context of information systems engineering. By the end of this section, you will be able to define what a model is, identify the qualities of a good model, and understand why modelling is an indispensable activity in modern software engineering.\n\n\nAs software systems become increasingly complex, the primary challenge for engineers is not just writing code, but managing the immense complexity of the systems they build. How do we ensure that a large-scale system is correct, robust, and aligned with user needs before investing thousands of hours in implementation? This is the core problem that modelling addresses.\n\nThe following quotes highlight the human-centric and real-world implications of this challenge:\n\n> \"Concern for man himself and his fate must always form the chief interest of all technical endeavors. [...] Never forget this in the midst of your diagrams and equations.\"\n>\n> --- **Albert Einstein**\n\n> \"In Software Engineering people often believe that a state is a node in a graph and do not even care about what a state means in reality.\"\n>\n> --- **David L. Parnas**\n\nThese reflections guide our approach: modelling is not an abstract exercise but a critical tool for building systems that are both technically sound and meaningful in the real world.\n\n## What is Modelling?\n\nIn software engineering, \"modelling\" is often misunderstood and reduced to clichés: drawing diagrams because a process demands it, or simply creating documentation.\n\n![A cliché representation of modelling, with complex and confusing shapes connected by arrows.](images/AMSI_BUNCHOFSHAPES.png){width=\"50%\" fig-align=\"center\"}\n\nIn reality, **modelling is a rigorous intellectual activity focused on understanding and communicating complex systems**.\n\n### The Problem Space vs. The Solution Space\n\nA critical distinction in advanced modelling is the separation between two domains:\n\n* **The Problem Space:** This refers to the real-world environment, with all its complexities, rules, and stakeholders. A model in this space aims to understand and formalize the \"what\" — what is the problem to be solved?\n* **The Solution Space:** This refers to the computational system we intend to build. A model in this space specifies the \"how\" — how will our software be structured and behave to solve the problem?\n\nEffective modelling involves creating a clear and verifiable bridge between these two spaces.\n\n### A More Formal Definition\n\nAccording to Jeff Rothenberg, a model is a simplification of reality that allows us to reason about the world in a more manageable way. Building on this, we can define a model as:\n\n* A **simplification** of a real or imagined reality...\n* ...that captures its **essential properties**...\n* ...to help us **understand and reason** about it...\n* ...for a specific **cognitive purpose** (e.g., analysis, simulation, code generation).\n\nA good model must not only be an abstraction but also possess qualities of the original system, allowing us to perform meaningful analysis and make predictions about the system's behaviour.\n\n## The Role of Models in Engineering\n\nIn any engineering discipline, building a complex system without prior modelling is unthinkable. Before investing significant resources, engineers create and learn from models to manage complexity and ensure the final product meets its requirements. In software engineering, models serve three critical roles throughout the development lifecycle:\n\n### Models for Analysis (Understanding the Problem)\nModels are first and foremost tools for thought and communication. They help us analyze the problem space by:\n\n* **Clarifying Requirements:** Translating ambiguous client needs into a precise, structured representation that can be discussed and validated.\n* **Exploring the Domain:** Capturing the essential concepts, rules, and relationships of the business domain, ensuring the development team shares a common understanding.\n\n### Models for Synthesis (Designing the Solution)\nOnce the problem is understood, models guide the design of the solution space. They serve as blueprints for construction, helping to:\n\n* **Architect the System:** Defining the high-level structure, components, and interactions of the software.\n* **Plan Development:** Providing a clear plan for implementation, allowing for better task allocation and project management.\n\n### Models for Validation (Mitigating Risks)\nFinally, models allow us to validate our design choices before writing a single line of production code, thereby mitigating risks. This can be done through:\n\n* **Simulations and Walkthroughs:** \"Executing\" the model mentally or with tools to identify logical flaws or unintended consequences.\n* **Formal Verification:** Applying mathematical techniques to prove that a model satisfies certain critical properties (e.g., security, safety).\n\n## The Spectrum of Modelling Languages\n\nTo describe an information system, engineers use various languages that fall along a spectrum, balancing the trade-off between intuitive expressiveness and formal precision. Choosing the right language depends on the context, the audience, and the goals of the model.\n\n### Informal Languages\n\nThese languages prioritize ease of communication and are accessible to all stakeholders, including non-technical clients.\n\n#### Natural Language (e.g., English, French)\nNatural language is the default for initial requirements gathering.\n\n* **Strengths:** Universally understood, requires no special training.\n* **Weaknesses:** Highly prone to what are known as the \"7 deadly sins\" of specification: ambiguity, contradiction, vagueness, noise (irrelevant information), silence (missing information), over-specification, and wishful thinking. These issues make it unsuitable for detailed and rigorous system design.\n\n#### Ad-hoc Notations (e.g., whiteboard sketches)\nThese are informal diagrams drawn without strict rules.\n\n* **Strengths:** Excellent for brainstorming and collaborative sessions; highly flexible and fast to create.\n* **Weaknesses:** Lacks a well-defined syntax and semantics. The meaning of a symbol can be interpreted differently by each person, leading to significant ambiguity and making it impossible to automate any analysis.\n\n### Formal and Semi-Formal Languages\n\nAs we move toward implementation, the need for precision increases, requiring languages with well-defined rules.\n\n#### Semi-Formal Notations (e.g., UML)\nThis is the dominant category in modern software engineering. UML (Unified Modelling Language) is the industry standard.\n\n* **Strengths:** Provides a well-defined visual syntax that is more intuitive than purely formal languages. It offers a partial common interpretation (semantics) and supports partial automation, such as code generation and model checking. The learning curve is relatively fast.\n* **Weaknesses:** While the syntax is standardized, UML's semantics can sometimes remain ambiguous, leaving room for interpretation in complex scenarios.\n\n#### Formal Notations (e.g., Z, VDM, Alloy)\nThese languages are based on mathematical principles, providing the highest level of precision.\n\n* **Strengths:** Possess a well-defined syntax and an unambiguous mathematical semantics. This rigor eliminates ambiguity and allows for extensive automation, including formal verification and proof of correctness.\n* **Weaknesses:** Their mathematical nature makes them difficult for non-experts to read and requires a significant learning investment. They are typically used for safety-critical or mission-critical systems where absolute correctness is paramount.\n\n### Summary Comparison\n\n| Language Type | Syntax | Semantics | Ambiguity | Tool Support |\n| :--- | :--- | :--- | :--- | :--- |\n| **Natural Language**| Undefined | Informal | Very High | Low |\n| **Ad-hoc** | Undefined | Informal | High | Very Low |\n| **Semi-Formal (UML)**| Defined | Partially Formal | Low | High |\n| **Formal (Z, VDM)**| Defined | Formal | Very Low | Very High |\n\n## Qualities of a Good Model\n\nTo be effective, a model must be more than just a picture; it must possess specific qualities that make it useful for its intended purpose. The famous statistician George E.P. Box aptly noted:\n\n> \"Essentially, all models are wrong, but some are useful.\"\n>\n> --- **George E.P. Box**\n\nThe usefulness of a model can be evaluated across three distinct dimensions: its syntax, its semantics, and its pragmatics.\n\n### Syntactic Quality: Is the Model Well-Formed?\n\nThis dimension concerns the structure and comprehensibility of the model itself, independent of what it represents.\n\n* **Understandable:** The model must use a notation that is clear and intuitive for its intended audience, whether they are domain experts, developers, or clients. A model that cannot be easily understood fails its primary purpose of communication.\n\n\n### Semantic Quality: Does the Model Represent Reality Faithfully?\n\nThis is about the relationship between the model and the system it represents. The goal is to ensure the model is a truthful representation.\n\n* **Abstract:** A model must be an effective abstraction, focusing on the essential aspects of the system while intentionally omitting irrelevant details. This is the primary mechanism for managing complexity.\n* **Precise:** Precision is a measure of how faithfully the model reflects reality. It encompasses several sub-qualities:\n    * **Correctness:** The model does not contain any information that is false with respect to the system.\n    * **Completeness:** The model includes all relevant information for its purpose.\n    * **Lack of Ambiguity:** The statements made by the model have one and only one interpretation.\n\n### Pragmatic Quality: Is the Model Useful for its Purpose?\n\nThis dimension evaluates the model's utility in practice. A model can be well-formed and accurate but still be useless if it doesn't serve its purpose.\n\n* **Predictive:** The model must allow us to deduce non-trivial properties about the system it represents. It should be a tool for analysis and reasoning, helping us answer \"what if\" questions.\n* **Inexpensive:** The cost of creating, analyzing, and maintaining the model must be significantly lower than the cost of experimenting with the actual system. If the model is as complex or expensive as the system itself, it loses its pragmatic value.","srcMarkdownNoYaml":"\n\nThis chapter introduces the principles of modelling in the context of information systems engineering. By the end of this section, you will be able to define what a model is, identify the qualities of a good model, and understand why modelling is an indispensable activity in modern software engineering.\n\n### The Central Challenge: Managing Complexity\n\nAs software systems become increasingly complex, the primary challenge for engineers is not just writing code, but managing the immense complexity of the systems they build. How do we ensure that a large-scale system is correct, robust, and aligned with user needs before investing thousands of hours in implementation? This is the core problem that modelling addresses.\n\nThe following quotes highlight the human-centric and real-world implications of this challenge:\n\n> \"Concern for man himself and his fate must always form the chief interest of all technical endeavors. [...] Never forget this in the midst of your diagrams and equations.\"\n>\n> --- **Albert Einstein**\n\n> \"In Software Engineering people often believe that a state is a node in a graph and do not even care about what a state means in reality.\"\n>\n> --- **David L. Parnas**\n\nThese reflections guide our approach: modelling is not an abstract exercise but a critical tool for building systems that are both technically sound and meaningful in the real world.\n\n## What is Modelling?\n\nIn software engineering, \"modelling\" is often misunderstood and reduced to clichés: drawing diagrams because a process demands it, or simply creating documentation.\n\n![A cliché representation of modelling, with complex and confusing shapes connected by arrows.](images/AMSI_BUNCHOFSHAPES.png){width=\"50%\" fig-align=\"center\"}\n\nIn reality, **modelling is a rigorous intellectual activity focused on understanding and communicating complex systems**.\n\n### The Problem Space vs. The Solution Space\n\nA critical distinction in advanced modelling is the separation between two domains:\n\n* **The Problem Space:** This refers to the real-world environment, with all its complexities, rules, and stakeholders. A model in this space aims to understand and formalize the \"what\" — what is the problem to be solved?\n* **The Solution Space:** This refers to the computational system we intend to build. A model in this space specifies the \"how\" — how will our software be structured and behave to solve the problem?\n\nEffective modelling involves creating a clear and verifiable bridge between these two spaces.\n\n### A More Formal Definition\n\nAccording to Jeff Rothenberg, a model is a simplification of reality that allows us to reason about the world in a more manageable way. Building on this, we can define a model as:\n\n* A **simplification** of a real or imagined reality...\n* ...that captures its **essential properties**...\n* ...to help us **understand and reason** about it...\n* ...for a specific **cognitive purpose** (e.g., analysis, simulation, code generation).\n\nA good model must not only be an abstraction but also possess qualities of the original system, allowing us to perform meaningful analysis and make predictions about the system's behaviour.\n\n## The Role of Models in Engineering\n\nIn any engineering discipline, building a complex system without prior modelling is unthinkable. Before investing significant resources, engineers create and learn from models to manage complexity and ensure the final product meets its requirements. In software engineering, models serve three critical roles throughout the development lifecycle:\n\n### Models for Analysis (Understanding the Problem)\nModels are first and foremost tools for thought and communication. They help us analyze the problem space by:\n\n* **Clarifying Requirements:** Translating ambiguous client needs into a precise, structured representation that can be discussed and validated.\n* **Exploring the Domain:** Capturing the essential concepts, rules, and relationships of the business domain, ensuring the development team shares a common understanding.\n\n### Models for Synthesis (Designing the Solution)\nOnce the problem is understood, models guide the design of the solution space. They serve as blueprints for construction, helping to:\n\n* **Architect the System:** Defining the high-level structure, components, and interactions of the software.\n* **Plan Development:** Providing a clear plan for implementation, allowing for better task allocation and project management.\n\n### Models for Validation (Mitigating Risks)\nFinally, models allow us to validate our design choices before writing a single line of production code, thereby mitigating risks. This can be done through:\n\n* **Simulations and Walkthroughs:** \"Executing\" the model mentally or with tools to identify logical flaws or unintended consequences.\n* **Formal Verification:** Applying mathematical techniques to prove that a model satisfies certain critical properties (e.g., security, safety).\n\n## The Spectrum of Modelling Languages\n\nTo describe an information system, engineers use various languages that fall along a spectrum, balancing the trade-off between intuitive expressiveness and formal precision. Choosing the right language depends on the context, the audience, and the goals of the model.\n\n### Informal Languages\n\nThese languages prioritize ease of communication and are accessible to all stakeholders, including non-technical clients.\n\n#### Natural Language (e.g., English, French)\nNatural language is the default for initial requirements gathering.\n\n* **Strengths:** Universally understood, requires no special training.\n* **Weaknesses:** Highly prone to what are known as the \"7 deadly sins\" of specification: ambiguity, contradiction, vagueness, noise (irrelevant information), silence (missing information), over-specification, and wishful thinking. These issues make it unsuitable for detailed and rigorous system design.\n\n#### Ad-hoc Notations (e.g., whiteboard sketches)\nThese are informal diagrams drawn without strict rules.\n\n* **Strengths:** Excellent for brainstorming and collaborative sessions; highly flexible and fast to create.\n* **Weaknesses:** Lacks a well-defined syntax and semantics. The meaning of a symbol can be interpreted differently by each person, leading to significant ambiguity and making it impossible to automate any analysis.\n\n### Formal and Semi-Formal Languages\n\nAs we move toward implementation, the need for precision increases, requiring languages with well-defined rules.\n\n#### Semi-Formal Notations (e.g., UML)\nThis is the dominant category in modern software engineering. UML (Unified Modelling Language) is the industry standard.\n\n* **Strengths:** Provides a well-defined visual syntax that is more intuitive than purely formal languages. It offers a partial common interpretation (semantics) and supports partial automation, such as code generation and model checking. The learning curve is relatively fast.\n* **Weaknesses:** While the syntax is standardized, UML's semantics can sometimes remain ambiguous, leaving room for interpretation in complex scenarios.\n\n#### Formal Notations (e.g., Z, VDM, Alloy)\nThese languages are based on mathematical principles, providing the highest level of precision.\n\n* **Strengths:** Possess a well-defined syntax and an unambiguous mathematical semantics. This rigor eliminates ambiguity and allows for extensive automation, including formal verification and proof of correctness.\n* **Weaknesses:** Their mathematical nature makes them difficult for non-experts to read and requires a significant learning investment. They are typically used for safety-critical or mission-critical systems where absolute correctness is paramount.\n\n### Summary Comparison\n\n| Language Type | Syntax | Semantics | Ambiguity | Tool Support |\n| :--- | :--- | :--- | :--- | :--- |\n| **Natural Language**| Undefined | Informal | Very High | Low |\n| **Ad-hoc** | Undefined | Informal | High | Very Low |\n| **Semi-Formal (UML)**| Defined | Partially Formal | Low | High |\n| **Formal (Z, VDM)**| Defined | Formal | Very Low | Very High |\n\n## Qualities of a Good Model\n\nTo be effective, a model must be more than just a picture; it must possess specific qualities that make it useful for its intended purpose. The famous statistician George E.P. Box aptly noted:\n\n> \"Essentially, all models are wrong, but some are useful.\"\n>\n> --- **George E.P. Box**\n\nThe usefulness of a model can be evaluated across three distinct dimensions: its syntax, its semantics, and its pragmatics.\n\n### Syntactic Quality: Is the Model Well-Formed?\n\nThis dimension concerns the structure and comprehensibility of the model itself, independent of what it represents.\n\n* **Understandable:** The model must use a notation that is clear and intuitive for its intended audience, whether they are domain experts, developers, or clients. A model that cannot be easily understood fails its primary purpose of communication.\n\n\n### Semantic Quality: Does the Model Represent Reality Faithfully?\n\nThis is about the relationship between the model and the system it represents. The goal is to ensure the model is a truthful representation.\n\n* **Abstract:** A model must be an effective abstraction, focusing on the essential aspects of the system while intentionally omitting irrelevant details. This is the primary mechanism for managing complexity.\n* **Precise:** Precision is a measure of how faithfully the model reflects reality. It encompasses several sub-qualities:\n    * **Correctness:** The model does not contain any information that is false with respect to the system.\n    * **Completeness:** The model includes all relevant information for its purpose.\n    * **Lack of Ambiguity:** The statements made by the model have one and only one interpretation.\n\n### Pragmatic Quality: Is the Model Useful for its Purpose?\n\nThis dimension evaluates the model's utility in practice. A model can be well-formed and accurate but still be useless if it doesn't serve its purpose.\n\n* **Predictive:** The model must allow us to deduce non-trivial properties about the system it represents. It should be a tool for analysis and reasoning, helping us answer \"what if\" questions.\n* **Inexpensive:** The cost of creating, analyzing, and maintaining the model must be significantly lower than the cost of experimenting with the actual system. If the model is as complex or expensive as the system itself, it loses its pragmatic value."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"01-intro-modelling.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","bibliography":["references.bib"],"theme":["cosmo","brand"],"title":"Introduction to Modelling"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"01-intro-modelling.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt","title":"Introduction to Modelling"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}