{"title":"Practical Exercises: OCL Constraints","markdown":{"yaml":{"title":"Practical Exercises: OCL Constraints","format":"html"},"headingText":"Exercise 1: Uniqueness of an Identifier","containsRefs":false,"markdown":"\n\nThis chapter provides a series of practical exercises to apply the concepts of the Object Constraint Language (OCL) to UML Class Diagrams. Each exercise presents a problem description and a UML model, followed by a detailed solution explaining the OCL constraints used to enforce the business rules.\n\n\n**Problem:**\nUsing the diagram for people and cars, write an OCL constraint to guarantee that each person has a unique identification number (`num`) across all instances of the `Personne` class[cite: 24].\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the People and Cars exercise.](images/exo1-personne-voiture.png){fig-alt=\"Class diagram for People and Cars.\"}\n\n**Correction Details:**\n\nThe goal is to ensure that the `num` attribute is unique for every person in the system[cite: 28]. In OCL, this can be expressed in two equivalent ways[cite: 29].\n\n* **Formulation 1: Using `isUnique()`** [cite: 30]\n    This is the most direct and readable way to express the constraint. The `isUnique()` operation checks if a given property is unique for all elements in a collection.\n\n    ```ocl\n    context Personne inv pKeyPersonne:\n      Personne.allInstances()->isUnique(num)\n    ```\n    * **Explanation:** This invariant states that for the entire collection of `Personne.allInstances()`, the value of the `num` attribute must be unique for each instance[cite: 32].\n\n* **Formulation 2: Using `forAll()`** [cite: 34]\n    This formulation uses the universal quantifier `forAll()` to express the same logic by comparing every pair of `Personne` instances.\n\n    ```ocl\n    context Personne inv pKeyPersonne:\n      Personne.allInstances()->forAll(p1, p2 | \n        p1 <> p2 implies p1.num <> p2.num\n      )\n    ```\n    * **Explanation:** This invariant iterates over all possible pairs of `Personne` instances (`p1` and `p2`)[cite: 37]. It states that **for all** pairs, **if** `p1` and `p2` are different objects, **then** their `num` attributes must also be different[cite: 37].\n\n**Key Concepts Illustrated:**\n\n* **Context:** The `context Personne` declaration specifies that the constraint applies to the `Personne` class[cite: 31].\n* **Invariant (`inv`):** An invariant is a rule that must always be true for all instances of a class throughout their lifetime[cite: 25].\n* **`allInstances()`:** A class-level operation that returns a collection of all instances of that class in the system[cite: 31, 36].\n* **Collection Operations:** This exercise showcases two fundamental collection operations: `isUnique()` for a direct check [cite: 31] and `forAll()` for expressing complex logical conditions on all elements[cite: 36].\n\n:::\n\n### Exercise 2: Uniqueness Within a Group\n\n**Problem:**\nFor the company organization model, an employee's ID number (`matricule`) must be unique within their department, but not necessarily across the entire company[cite: 59]. Write an OCL constraint to enforce this rule.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Company Organization exercise.](images/exo2-entreprise-departement.png){fig-alt=\"Class diagram for Company Organization.\"}\n\n**Correction Details:**\n\nThe key to this problem is choosing the correct context. The constraint is about the uniqueness of employees *within a department*, so the most logical context is `Departement`[cite: 72].\n\n* **Correct Solution: Context `Departement`** [cite: 68]\n    This approach is simple and directly models the requirement[cite: 70]. It evaluates the constraint for each department individually[cite: 72]. An idiomatic way to write this is using `isUnique()`:\n\n    ```ocl\n    context Departement inv pKeyEmploye:\n      self.employe->isUnique(matricule)\n    ```\n    The provided source also shows an equivalent formulation using `forAll`[cite: 70]:\n    ```ocl\n    context Departement inv pKeyEmploye:\n      self.employe->forAll(e1, e2 | e1 <> e2 implies e1.matricule <> e2.matricule)\n    ```\n    * **Explanation:** For each instance of `Departement` (`self`), we navigate the `employe` association to get the collection of employees in that department. We then ensure that all `matricule` attributes within that collection are unique[cite: 71].\n\n**Key Concepts Illustrated:**\n\n* **Choosing the Right Context:** This is the most important lesson. Placing the invariant in the `Departement` context radically simplifies the expression and makes the intent clear[cite: 72].\n* **Navigation:** The expression `self.employe` demonstrates navigation across an association from an instance of one class to a collection of related instances[cite: 70].\n* **Scoped Uniqueness:** This exercise contrasts with the first one by showing how to enforce uniqueness within a specific scope (a department) rather than globally.\n\n:::\n\n### Exercise 3: Preventing Circular Composition\n\n**Problem:**\nIn the geometric figures model, a composite figure (`FigureComposee`) is made up of other figures. It is crucial to prevent circular compositions, where a figure could contain itself, either directly or indirectly[cite: 91]. Write an OCL constraint to forbid this.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Geometric Figures exercise.](images/exo3-figures-geometriques.png){fig-alt=\"Class diagram for Geometric Figures.\"}\n\n**Correction Details:**\n\nThis problem requires two levels of solution: one for direct cycles and a more advanced one for indirect cycles.\n\n* **Solution 1: Preventing Direct Cycles**\n    This constraint prevents a `FigureComposee` from including itself in its immediate list of sub-figures[cite: 98, 101].\n\n    ```ocl\n    context FigureComposee inv circularComposition:\n      not self.figure->includes(self)\n    ```\n    * **Explanation:** For any instance of `FigureComposee` (`self`), this invariant checks the collection of its direct sub-figures (`self.figure`) and asserts that the collection does not include the instance itself[cite: 99].\n\n* **Solution 2: Preventing Indirect Cycles (Advanced)**\n    The first solution is insufficient because it doesn't prevent A from containing B, which in turn contains A[cite: 102]. To solve this, we need a recursive query to find *all* sub-figures at any level of nesting (the transitive closure)[cite: 103, 114].\n\n    ```ocl\n    context FigureComposee\n    -- Define a helper function to get all nested sub-figures\n    def: allSubFigures(): Set(Figure) = \n      self.figure->union(\n        self.figure->select(f | f.oclIsTypeOf(FigureComposee))\n                    ->collect(f | f.allSubFigures())\n                    ->flatten()\n      )\n\n    -- The invariant uses the helper function\n    inv noCircularComposition:\n      not self.allSubFigures()->includes(self)\n    ```\n    * **Explanation:** We first define a helper operation `allSubFigures()` that recursively collects all direct figures and all sub-figures of any composite children[cite: 114]. The invariant `noCircularComposition` then uses this function to check that `self` is not present in the complete set of its descendants, thus preventing all direct and indirect cycles[cite: 113, 114].\n\n**Key Concepts Illustrated:**\n\n* **`includes()`:** A collection operation that checks for the presence of an element.\n* **Helper Operations (`def`)**: OCL allows the definition of custom, reusable queries, which is essential for complex logic like recursion[cite: 103].\n* **Recursion and Transitive Closure:** The `allSubFigures()` operation is a classic example of using recursion to navigate a hierarchical structure to find all connected nodes[cite: 114].\n\n:::\n\n### Exercise 4: Constraining Family Relationships\n\n**Problem:**\nUsing the family links diagram, impose a constraint to forbid a person from being both a parent and a spouse to the same other person[cite: 125].\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Family Links exercise.](images/exo4-liens-familiaux.png){fig-alt=\"Class diagram for Family Links.\"}\n\n**Correction Details:**\n\nThe constraint needs to ensure that the set of a person's children and the set of a person's spouses are disjoint (have no common elements)[cite: 126].\n\n```ocl\ncontext Personne inv notChildParentsMarriage:\n  self.conjoint->excludesAll(self.enfant)\n``` \n\n**Explanation:**\n\n* `self`: Refers to the instance of the `Personne` class on which the constraint is being evaluated.\n* `conjoint`: Refers to the association that links a person to their spouse(s). It returns a collection of `Personne` objects.\n* `enfant`: Refers to the association that links a person to their children.\n* `excludesAll()`: This OCL collection operation returns `true` if the first collection (the spouses) contains none of the elements from the second collection (the children).\n\n**Key Concepts Illustrated:**\n\n* **Reflexive Association:** The diagram shows the `Personne` class related to itself. OCL navigates these associations using the provided role names (`conjoint`, `enfant`).\n* **Set Operations:** OCL provides a rich set of operations for working with collections, including `excludesAll()`, which is used here to ensure two sets are disjoint.\n\n:::\n\n### Exercise 5: Hotel\n\n**Problem:**\nA hotel is composed of at least two \"rooms\". Each room consists of several parts such as bedrooms, washrooms, living rooms, and meeting rooms. Each room has a minimum of one bedroom and one washroom. The washrooms can be bathrooms (with a tub) or shower rooms. A room is also characterized by a price and a number. The hotel itself has a category, and an address. Furthermore, the hotel can host clients, employ staff, and is managed by a staff member.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Hotel exercise.](images/exo5-hotel.png){fig-alt=\"Class diagram for the Hotel exercise.\"}\n\n**Correction Details:**\n\nThe problem requires two OCL invariants to ensure the correct composition of a hotel room (`Chambre`).\n\n* **Constraint 1: Each room must have at least one bedroom.**\n    This constraint can be formulated in two ways. The first filters the collection of parts and checks its size, while the second (and more efficient) way simply checks for the existence of such a part.\n\n    *Formulation A: Using `select` and `size`*\n\n    ```ocl\n    context Chambre inv minChambreACoucher:\n      self.piece->select(p | p.oclIsTypeOf(ChambreACoucher))->size() >= 1\n    ```\n\n    *Formulation B: Using `exists`*\n\n    ```ocl\n    context Chambre inv minChambreACoucher:\n      self.piece->exists(p | p.oclIsTypeOf(ChambreACoucher))\n    ```\n\n* **Constraint 2: Each room must have at least one washroom.**\n    Similarly, this constraint verifies that at least one of the room's parts is a `SalleDEau` (which is a superclass for `SalleDeBain` and `SalleDeDouche`).\n\n    *Formulation A: Using `select` and `size`*\n\n    ```ocl\n    context Chambre inv minSalleDEau:\n      self.piece->select(p | p.oclIsTypeOf(SalleDEau))->size() >= 1\n    ```\n\n    *Formulation B: Using `exists`*\n\n    ```ocl\n    context Chambre inv minSalleDEau:\n      self.piece->exists(p | p.oclIsTypeOf(SalleDEau))\n    ```\n\n**Key Concepts Illustrated:**\n\n* **Navigation:** The constraints start from an instance of `Chambre` (`self`) and navigate the `piece` association to access the collection of parts.\n* **`oclIsTypeOf()`:** This operation is used to filter a collection of objects based on their specific class.\n* **`select()` vs. `exists()`:** This exercise highlights two common ways to check for the presence of an item in a collection. `select()` creates a new sub-collection, while `exists()` returns a simple boolean, which is often clearer and more performant for this type of rule.\n\n:::\n\n### Exercise 6: Banking System\n\n**Problem:**\nModel a banking system where people own accounts in banking organizations. Enforce several business rules using OCL, including data integrity invariants (unique IDs, balance limits), initial attribute values, pre- and post-conditions for account operations (deposit, withdrawal), and queries to retrieve client information.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Banking System exercise.](images/exo6-banque.png){fig-alt=\"Class diagram for a Banking System.\"}\n\n**Correction Details:**\n\nThis comprehensive exercise uses multiple OCL features to define the behaviour and constraints of a banking system.\n\n**1. Invariants (Data Integrity Rules)**\n\nThese rules must always be true for the system to be in a valid state.\n\n* **Unique account number per bank:**\n\n    ```ocl\n    context OrganismeBancaire inv pKeyCompte:\n      self.compte->isUnique(numero)\n    ```\n    *Explanation: For each bank, the set of its accounts must have unique numbers.*\n\n* **The balance of an account cannot exceed 1,000,000:**\n\n    ```ocl\n    context Compte inv creditMax:\n      self.solde <= 1000000\n    ```\n\n* **The interest rate must be strictly positive:**\n\n    ```ocl\n    context Compte inv tauxPositif:\n      self.taux > 0\n    ```\n\n* **A person's ID must be unique:**\n\n    ```ocl\n    context Personne inv idUnique:\n      Personne.allInstances()->isUnique(numero)\n    ```\n\n**2. Initial and Derived Values**\n\nOCL can specify initial values for attributes or define attributes whose values are derived from others.\n\n* **The balance of a new account is initialized to 0:**\n\n    ```ocl\n    context Compte::solde: Real\n        init: 0\n    ```\n\n* **The interest amount is derived from the balance and rate:**\n\n    ```ocl\n    context Compte::interets: Real\n        derive: solde * taux\n    ```\n\n**3. Pre- and Post-conditions (Operation Contracts)**\n\nThese define the \"contract\" for an operation: what must be true before it runs (`pre`) and what must be true after it finishes (`post`).\n\n* **Deposit money (`verser`):**\n\n    ```ocl\n    context Compte::verser(montant: Real)\n        pre montantPositif: montant > 0\n        post soldeMisAJour: self.solde = self.solde@pre + montant\n    ```\n    *Explanation: The precondition requires the deposit amount to be positive. The postcondition guarantees the new balance is the old balance (`@pre`) plus the amount.*\n\n* **Withdraw money (`retirer`):**\n\n    ```ocl\n    context Compte::retirer(montant: Real)\n        pre montantPositif: montant > 0\n        pre soldeSuffisant: self.solde >= montant\n        post soldeMisAJour: self.solde = self.solde@pre - montant\n    ```\n    *Explanation: The preconditions require a positive amount and sufficient funds. The postcondition guarantees the balance is correctly updated.*\n\n* **Get balance (`obtenirSolde`):**\n\n    ```ocl\n    context Compte::obtenirSolde(): Real\n        post resultatCorrect: result = self.solde\n        post soldeInchange: self.solde = self.solde@pre\n    ```\n    *Explanation: The postconditions guarantee the returned value (`result`) is the current balance and that the operation did not change the state of the balance.*\n\n**4. Queries (Helper Definitions)**\n\nOCL can be used to define reusable queries on the model.\n\n* **Get a list of all distinct client first names:**\n\n    ```ocl\n    context Personne def: listePrenomsDifferents(): Set(String) =\n      Personne.allInstances()->collect(prenom)->asSet()\n    ```\n    *Explanation: This defines a function that gets all `Personne` instances, collects their first names (`prenom`), and converts the resulting collection into a `Set` to ensure uniqueness.*\n\n\n**Key Concepts Illustrated:**\n\n* **Invariants (`inv`):** Rules that define a stable and consistent state for the model's objects.\n* **Initializers (`init`):** Specifies the state of an attribute upon an object's creation.\n* **Derived Values (`derive`):** Defines an attribute whose value is automatically calculated from other properties.\n* **Design by Contract (`pre`, `post`):** A powerful method for specifying the precise behaviour of operations.\n* **`@pre`:** A keyword used in post-conditions to refer to the value of a property *before* the operation was executed.\n* **`result`:** A keyword used in post-conditions to refer to the value returned by the operation.\n* **Querying (`def`):** Using OCL not just for constraints, but to define reusable functions that can be called to retrieve information from the model.\n\n:::\n","srcMarkdownNoYaml":"\n\nThis chapter provides a series of practical exercises to apply the concepts of the Object Constraint Language (OCL) to UML Class Diagrams. Each exercise presents a problem description and a UML model, followed by a detailed solution explaining the OCL constraints used to enforce the business rules.\n\n### Exercise 1: Uniqueness of an Identifier\n\n**Problem:**\nUsing the diagram for people and cars, write an OCL constraint to guarantee that each person has a unique identification number (`num`) across all instances of the `Personne` class[cite: 24].\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the People and Cars exercise.](images/exo1-personne-voiture.png){fig-alt=\"Class diagram for People and Cars.\"}\n\n**Correction Details:**\n\nThe goal is to ensure that the `num` attribute is unique for every person in the system[cite: 28]. In OCL, this can be expressed in two equivalent ways[cite: 29].\n\n* **Formulation 1: Using `isUnique()`** [cite: 30]\n    This is the most direct and readable way to express the constraint. The `isUnique()` operation checks if a given property is unique for all elements in a collection.\n\n    ```ocl\n    context Personne inv pKeyPersonne:\n      Personne.allInstances()->isUnique(num)\n    ```\n    * **Explanation:** This invariant states that for the entire collection of `Personne.allInstances()`, the value of the `num` attribute must be unique for each instance[cite: 32].\n\n* **Formulation 2: Using `forAll()`** [cite: 34]\n    This formulation uses the universal quantifier `forAll()` to express the same logic by comparing every pair of `Personne` instances.\n\n    ```ocl\n    context Personne inv pKeyPersonne:\n      Personne.allInstances()->forAll(p1, p2 | \n        p1 <> p2 implies p1.num <> p2.num\n      )\n    ```\n    * **Explanation:** This invariant iterates over all possible pairs of `Personne` instances (`p1` and `p2`)[cite: 37]. It states that **for all** pairs, **if** `p1` and `p2` are different objects, **then** their `num` attributes must also be different[cite: 37].\n\n**Key Concepts Illustrated:**\n\n* **Context:** The `context Personne` declaration specifies that the constraint applies to the `Personne` class[cite: 31].\n* **Invariant (`inv`):** An invariant is a rule that must always be true for all instances of a class throughout their lifetime[cite: 25].\n* **`allInstances()`:** A class-level operation that returns a collection of all instances of that class in the system[cite: 31, 36].\n* **Collection Operations:** This exercise showcases two fundamental collection operations: `isUnique()` for a direct check [cite: 31] and `forAll()` for expressing complex logical conditions on all elements[cite: 36].\n\n:::\n\n### Exercise 2: Uniqueness Within a Group\n\n**Problem:**\nFor the company organization model, an employee's ID number (`matricule`) must be unique within their department, but not necessarily across the entire company[cite: 59]. Write an OCL constraint to enforce this rule.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Company Organization exercise.](images/exo2-entreprise-departement.png){fig-alt=\"Class diagram for Company Organization.\"}\n\n**Correction Details:**\n\nThe key to this problem is choosing the correct context. The constraint is about the uniqueness of employees *within a department*, so the most logical context is `Departement`[cite: 72].\n\n* **Correct Solution: Context `Departement`** [cite: 68]\n    This approach is simple and directly models the requirement[cite: 70]. It evaluates the constraint for each department individually[cite: 72]. An idiomatic way to write this is using `isUnique()`:\n\n    ```ocl\n    context Departement inv pKeyEmploye:\n      self.employe->isUnique(matricule)\n    ```\n    The provided source also shows an equivalent formulation using `forAll`[cite: 70]:\n    ```ocl\n    context Departement inv pKeyEmploye:\n      self.employe->forAll(e1, e2 | e1 <> e2 implies e1.matricule <> e2.matricule)\n    ```\n    * **Explanation:** For each instance of `Departement` (`self`), we navigate the `employe` association to get the collection of employees in that department. We then ensure that all `matricule` attributes within that collection are unique[cite: 71].\n\n**Key Concepts Illustrated:**\n\n* **Choosing the Right Context:** This is the most important lesson. Placing the invariant in the `Departement` context radically simplifies the expression and makes the intent clear[cite: 72].\n* **Navigation:** The expression `self.employe` demonstrates navigation across an association from an instance of one class to a collection of related instances[cite: 70].\n* **Scoped Uniqueness:** This exercise contrasts with the first one by showing how to enforce uniqueness within a specific scope (a department) rather than globally.\n\n:::\n\n### Exercise 3: Preventing Circular Composition\n\n**Problem:**\nIn the geometric figures model, a composite figure (`FigureComposee`) is made up of other figures. It is crucial to prevent circular compositions, where a figure could contain itself, either directly or indirectly[cite: 91]. Write an OCL constraint to forbid this.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Geometric Figures exercise.](images/exo3-figures-geometriques.png){fig-alt=\"Class diagram for Geometric Figures.\"}\n\n**Correction Details:**\n\nThis problem requires two levels of solution: one for direct cycles and a more advanced one for indirect cycles.\n\n* **Solution 1: Preventing Direct Cycles**\n    This constraint prevents a `FigureComposee` from including itself in its immediate list of sub-figures[cite: 98, 101].\n\n    ```ocl\n    context FigureComposee inv circularComposition:\n      not self.figure->includes(self)\n    ```\n    * **Explanation:** For any instance of `FigureComposee` (`self`), this invariant checks the collection of its direct sub-figures (`self.figure`) and asserts that the collection does not include the instance itself[cite: 99].\n\n* **Solution 2: Preventing Indirect Cycles (Advanced)**\n    The first solution is insufficient because it doesn't prevent A from containing B, which in turn contains A[cite: 102]. To solve this, we need a recursive query to find *all* sub-figures at any level of nesting (the transitive closure)[cite: 103, 114].\n\n    ```ocl\n    context FigureComposee\n    -- Define a helper function to get all nested sub-figures\n    def: allSubFigures(): Set(Figure) = \n      self.figure->union(\n        self.figure->select(f | f.oclIsTypeOf(FigureComposee))\n                    ->collect(f | f.allSubFigures())\n                    ->flatten()\n      )\n\n    -- The invariant uses the helper function\n    inv noCircularComposition:\n      not self.allSubFigures()->includes(self)\n    ```\n    * **Explanation:** We first define a helper operation `allSubFigures()` that recursively collects all direct figures and all sub-figures of any composite children[cite: 114]. The invariant `noCircularComposition` then uses this function to check that `self` is not present in the complete set of its descendants, thus preventing all direct and indirect cycles[cite: 113, 114].\n\n**Key Concepts Illustrated:**\n\n* **`includes()`:** A collection operation that checks for the presence of an element.\n* **Helper Operations (`def`)**: OCL allows the definition of custom, reusable queries, which is essential for complex logic like recursion[cite: 103].\n* **Recursion and Transitive Closure:** The `allSubFigures()` operation is a classic example of using recursion to navigate a hierarchical structure to find all connected nodes[cite: 114].\n\n:::\n\n### Exercise 4: Constraining Family Relationships\n\n**Problem:**\nUsing the family links diagram, impose a constraint to forbid a person from being both a parent and a spouse to the same other person[cite: 125].\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Family Links exercise.](images/exo4-liens-familiaux.png){fig-alt=\"Class diagram for Family Links.\"}\n\n**Correction Details:**\n\nThe constraint needs to ensure that the set of a person's children and the set of a person's spouses are disjoint (have no common elements)[cite: 126].\n\n```ocl\ncontext Personne inv notChildParentsMarriage:\n  self.conjoint->excludesAll(self.enfant)\n``` \n\n**Explanation:**\n\n* `self`: Refers to the instance of the `Personne` class on which the constraint is being evaluated.\n* `conjoint`: Refers to the association that links a person to their spouse(s). It returns a collection of `Personne` objects.\n* `enfant`: Refers to the association that links a person to their children.\n* `excludesAll()`: This OCL collection operation returns `true` if the first collection (the spouses) contains none of the elements from the second collection (the children).\n\n**Key Concepts Illustrated:**\n\n* **Reflexive Association:** The diagram shows the `Personne` class related to itself. OCL navigates these associations using the provided role names (`conjoint`, `enfant`).\n* **Set Operations:** OCL provides a rich set of operations for working with collections, including `excludesAll()`, which is used here to ensure two sets are disjoint.\n\n:::\n\n### Exercise 5: Hotel\n\n**Problem:**\nA hotel is composed of at least two \"rooms\". Each room consists of several parts such as bedrooms, washrooms, living rooms, and meeting rooms. Each room has a minimum of one bedroom and one washroom. The washrooms can be bathrooms (with a tub) or shower rooms. A room is also characterized by a price and a number. The hotel itself has a category, and an address. Furthermore, the hotel can host clients, employ staff, and is managed by a staff member.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Hotel exercise.](images/exo5-hotel.png){fig-alt=\"Class diagram for the Hotel exercise.\"}\n\n**Correction Details:**\n\nThe problem requires two OCL invariants to ensure the correct composition of a hotel room (`Chambre`).\n\n* **Constraint 1: Each room must have at least one bedroom.**\n    This constraint can be formulated in two ways. The first filters the collection of parts and checks its size, while the second (and more efficient) way simply checks for the existence of such a part.\n\n    *Formulation A: Using `select` and `size`*\n\n    ```ocl\n    context Chambre inv minChambreACoucher:\n      self.piece->select(p | p.oclIsTypeOf(ChambreACoucher))->size() >= 1\n    ```\n\n    *Formulation B: Using `exists`*\n\n    ```ocl\n    context Chambre inv minChambreACoucher:\n      self.piece->exists(p | p.oclIsTypeOf(ChambreACoucher))\n    ```\n\n* **Constraint 2: Each room must have at least one washroom.**\n    Similarly, this constraint verifies that at least one of the room's parts is a `SalleDEau` (which is a superclass for `SalleDeBain` and `SalleDeDouche`).\n\n    *Formulation A: Using `select` and `size`*\n\n    ```ocl\n    context Chambre inv minSalleDEau:\n      self.piece->select(p | p.oclIsTypeOf(SalleDEau))->size() >= 1\n    ```\n\n    *Formulation B: Using `exists`*\n\n    ```ocl\n    context Chambre inv minSalleDEau:\n      self.piece->exists(p | p.oclIsTypeOf(SalleDEau))\n    ```\n\n**Key Concepts Illustrated:**\n\n* **Navigation:** The constraints start from an instance of `Chambre` (`self`) and navigate the `piece` association to access the collection of parts.\n* **`oclIsTypeOf()`:** This operation is used to filter a collection of objects based on their specific class.\n* **`select()` vs. `exists()`:** This exercise highlights two common ways to check for the presence of an item in a collection. `select()` creates a new sub-collection, while `exists()` returns a simple boolean, which is often clearer and more performant for this type of rule.\n\n:::\n\n### Exercise 6: Banking System\n\n**Problem:**\nModel a banking system where people own accounts in banking organizations. Enforce several business rules using OCL, including data integrity invariants (unique IDs, balance limits), initial attribute values, pre- and post-conditions for account operations (deposit, withdrawal), and queries to retrieve client information.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![UML diagram for the Banking System exercise.](images/exo6-banque.png){fig-alt=\"Class diagram for a Banking System.\"}\n\n**Correction Details:**\n\nThis comprehensive exercise uses multiple OCL features to define the behaviour and constraints of a banking system.\n\n**1. Invariants (Data Integrity Rules)**\n\nThese rules must always be true for the system to be in a valid state.\n\n* **Unique account number per bank:**\n\n    ```ocl\n    context OrganismeBancaire inv pKeyCompte:\n      self.compte->isUnique(numero)\n    ```\n    *Explanation: For each bank, the set of its accounts must have unique numbers.*\n\n* **The balance of an account cannot exceed 1,000,000:**\n\n    ```ocl\n    context Compte inv creditMax:\n      self.solde <= 1000000\n    ```\n\n* **The interest rate must be strictly positive:**\n\n    ```ocl\n    context Compte inv tauxPositif:\n      self.taux > 0\n    ```\n\n* **A person's ID must be unique:**\n\n    ```ocl\n    context Personne inv idUnique:\n      Personne.allInstances()->isUnique(numero)\n    ```\n\n**2. Initial and Derived Values**\n\nOCL can specify initial values for attributes or define attributes whose values are derived from others.\n\n* **The balance of a new account is initialized to 0:**\n\n    ```ocl\n    context Compte::solde: Real\n        init: 0\n    ```\n\n* **The interest amount is derived from the balance and rate:**\n\n    ```ocl\n    context Compte::interets: Real\n        derive: solde * taux\n    ```\n\n**3. Pre- and Post-conditions (Operation Contracts)**\n\nThese define the \"contract\" for an operation: what must be true before it runs (`pre`) and what must be true after it finishes (`post`).\n\n* **Deposit money (`verser`):**\n\n    ```ocl\n    context Compte::verser(montant: Real)\n        pre montantPositif: montant > 0\n        post soldeMisAJour: self.solde = self.solde@pre + montant\n    ```\n    *Explanation: The precondition requires the deposit amount to be positive. The postcondition guarantees the new balance is the old balance (`@pre`) plus the amount.*\n\n* **Withdraw money (`retirer`):**\n\n    ```ocl\n    context Compte::retirer(montant: Real)\n        pre montantPositif: montant > 0\n        pre soldeSuffisant: self.solde >= montant\n        post soldeMisAJour: self.solde = self.solde@pre - montant\n    ```\n    *Explanation: The preconditions require a positive amount and sufficient funds. The postcondition guarantees the balance is correctly updated.*\n\n* **Get balance (`obtenirSolde`):**\n\n    ```ocl\n    context Compte::obtenirSolde(): Real\n        post resultatCorrect: result = self.solde\n        post soldeInchange: self.solde = self.solde@pre\n    ```\n    *Explanation: The postconditions guarantee the returned value (`result`) is the current balance and that the operation did not change the state of the balance.*\n\n**4. Queries (Helper Definitions)**\n\nOCL can be used to define reusable queries on the model.\n\n* **Get a list of all distinct client first names:**\n\n    ```ocl\n    context Personne def: listePrenomsDifferents(): Set(String) =\n      Personne.allInstances()->collect(prenom)->asSet()\n    ```\n    *Explanation: This defines a function that gets all `Personne` instances, collects their first names (`prenom`), and converts the resulting collection into a `Set` to ensure uniqueness.*\n\n\n**Key Concepts Illustrated:**\n\n* **Invariants (`inv`):** Rules that define a stable and consistent state for the model's objects.\n* **Initializers (`init`):** Specifies the state of an attribute upon an object's creation.\n* **Derived Values (`derive`):** Defines an attribute whose value is automatically calculated from other properties.\n* **Design by Contract (`pre`, `post`):** A powerful method for specifying the precise behaviour of operations.\n* **`@pre`:** A keyword used in post-conditions to refer to the value of a property *before* the operation was executed.\n* **`result`:** A keyword used in post-conditions to refer to the value returned by the operation.\n* **Querying (`def`):** Using OCL not just for constraints, but to define reusable functions that can be called to retrieve information from the model.\n\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"07-practical-exercises-ocl.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","bibliography":["references.bib"],"theme":["cosmo","brand"],"title":"Practical Exercises: OCL Constraints"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"07-practical-exercises-ocl.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt","title":"Practical Exercises: OCL Constraints"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}