{"title":"State Machine Diagrams","markdown":{"yaml":{"title":"State Machine Diagrams"},"headingText":"Why We Need State Machines","containsRefs":false,"markdown":"\n\nThis chapter delves into one of UML's core behavioural modelling tools: the **State Machine Diagram**. While Class Diagrams describe a system's static structure, State Machine Diagrams model its dynamic behaviour. They focus on the lifecycle of a single object, detailing the sequence of states it passes through in response to events.\n\n\nClass Diagrams are excellent for defining *what* an object is and *what* it can do (its attributes and operations), but they often fall short in specifying *when* those operations can be called. This temporal ordering, or **protocol**, is crucial for modelling an object's lifecycle.\n\nConsider a simple `Door` object. Its usage is governed by rules:\n\n* A door can only be opened if it is currently closed and unlocked.\n* A door can only be closed if it is open and the doorway is clear.\n* Turning the key locks an unlocked door and unlocks a locked one.\n\nWhile these rules can be described using OCL preconditions, this approach provides a fragmented view and doesn't clearly show how the operations are linked together. State Machine Diagrams excel at visualizing this entire lifecycle in a single, coherent view.\n\n## Core Concepts of State Machines\n\nA State Machine Diagram visualizes an object's behaviour as a journey through a finite number of **states**. It discretizes behaviour into a set of relevant, abstract states, ignoring irrelevant details. For a `Door`, the relevant states might be `Open`, `Closed`, and `Locked`; its color is an irrelevant detail.\n\n![A simple protocol state machine diagram for a Door class.](images/statemachine-door-protocol.png){fig-alt=\"A simple protocol state machine for a Door class showing states like Open, Closed, and Locked.\" width=\"80%\" fig-align=\"center\"}\n\nThe diagram is composed of a few key elements:\n\n* **State:** A condition during the life of an object in which it satisfies some condition, performs some activity, or waits for an event. It's shown as a rectangle with rounded corners.\n* **Transition:** A directed relationship between a source state and a target state. It specifies that an object in the source state will enter the target state when a specific event occurs and certain conditions are met. Transitions are considered instantaneous.\n* **Initial State:** A pseudostate indicating the default starting point. It is shown as a solid black circle.\n* **Final State:** A state indicating that the object has completed its lifecycle. It is shown as a circle surrounding a smaller solid circle (a bullseye).\n\n### Anatomy of a Transition\n\nA transition moves an object from one state to another. Its full syntax is `trigger-event [guard] / effect`. Each part defines a specific aspect of the state change.\n\n![A visual representation of a UML transition, labeling the trigger, guard, and effect components.](images/transition-anatomy.png){fig-alt=\"Anatomy of a UML Transition.\" width=\"15%\" fig-align=\"center\"}\n\n* **Trigger (or Event):** The event that causes the transition to be considered. There are four main types of events:\n\n    * **Call Event:** The most common type. It corresponds to the reception of a **synchronous call** to an operation of the object. The syntax is simply the operation's name, for example, `open()` or `deposit(amount)`.\n\n    * **Signal Event:** Corresponds to the reception of an **asynchronous signal** by an object. Unlike an operation call, the sender does not wait for a reply. The syntax is the signal's name, for example, `onAlarmDetection`.\n\n    * **Change Event:** This event occurs when a specific boolean expression becomes true. It is used to model reactions to changing conditions. The syntax uses the `when` keyword, for example, `when(sensor.isConnected)`.\n\n    * **Time Event:** Occurs after a certain amount of time has passed or at a specific time. The syntax uses the `after` keyword (for a relative duration) or the `at` keyword (for an absolute time). For example, `after(5 seconds)` or `at(2025-12-25)`.\n\n* **Guard:** An optional boolean condition that must be true for the transition to fire. It is written in square brackets, e.g., `[doorway.empty]`.\n\n* **Effect (or Action):** An optional behaviour that is executed at the instant the transition fires.\n\n## Protocol vs. behavioural State Machines\n\nUML distinguishes between two main types of state machines, which serve different purposes.\n\n### Protocol State Machines\n\nA **Protocol State Machine** specifies the legal sequence of operations that can be called on an object. It acts as a \"user manual\" for a class, defining its lifecycle without specifying the implementation of its behaviour. Transitions in a protocol state machine have triggers and guards, but **no effects**.\n\n::: {.callout-note icon=\"true\" title=\"Key Idea: Protocol State Machine\"}\nA Protocol State Machine defines the valid order of operations. It answers the question: \"What can happen next?\" It is primarily used during analysis and interface specification.\n:::\n\nA key question for protocol state machines is what happens when an unexpected event occurs (e.g., a `slam()` event arrives at a `Door`). UML leaves this undefined, meaning it's up to the modeller to specify whether such events are ignored, rejected, or cause an error.\n\n### behavioural State Machines\n\nA **behavioural State Machine** goes further by specifying the object's reactions to events. It models the **effects** (actions or activities) that are executed when transitions occur or when the object is in a particular state.\n\n::: {.callout-note icon=\"true\" title=\"Key Idea: behavioural State Machine\"}\nA behavioural State Machine defines what an object *does* in response to events. It is a specification of implementation and is used during system design and construction.\n:::\n\nIn addition to effects on transitions, states themselves can have associated behaviours:\n\n* **Entry Action:** Executed whenever the state is entered (`entry / action`).\n* **Exit Action:** Executed whenever the state is exited (`exit / action`).\n* **Do Activity:** An ongoing activity performed as long as the object remains in that state (`do / activity`). It can be interrupted by an outgoing transition.\n\n![A behavioural state machine showing entry and exit actions.](images/statemachine-working-entry-exit.png){fig-alt=\"A behavioural state machine with entry/exit actions.\" width=\"50%\" fig-align=\"center\"}\n\nIn contrast to protocol state machines, behavioural state machines have a default behaviour for unexpected events: they are simply **ignored**.\n\n## Advanced Concepts: Structuring Complexity\n\nReal-world objects can have complex behaviours that would lead to messy, unreadable \"flat\" state machines. UML provides powerful structuring mechanisms to manage this complexity.\n\n### Hierarchical States (Composite States)\n\nA **Composite State** is a state that contains its own nested state machine. This allows for abstraction and top-down reasoning. A high-level state like `Working` can be expanded to reveal a detailed sub-machine that handles its internal logic. This is powerful because a single transition leaving the composite state (e.g., `shutdown()`) applies to all of its substates, dramatically reducing visual clutter.\n\n![A composite state 'Working' containing a full sub-machine.](images/statemachine-composite-state-example.png){fig-alt=\"A composite state named Working which contains a nested state machine with states like Off, On, and Diagnosis.\" width=\"80%\"}\n\n### Orthogonal Regions (Concurrency)\n\nAn **Orthogonal State** is a composite state that is divided into two or more independent regions, each with its own sub-machine. When an object is in an orthogonal state, it is simultaneously in one substate from *each* region. This is UML's way of modelling independent, concurrent behaviours within a single object, which avoids a \"combinatorial explosion\" of states.\n\nThe primary mechanism for entering and exiting these concurrent regions is through **Fork** and **Join** pseudostates. A fork splits a single incoming transition into multiple concurrent transitions, one for each region. A join synchronizes multiple incoming transitions from different regions into a single outgoing transition.\n\n![A Fork pseudostate splits one transition into three concurrent paths, which are later synchronized by a Join pseudostate.](images/fork-join.png){fig-alt=\"Diagram of a fork node splitting a transition into three parallel states, and a join node merging them back.\" width=\"50%\" fig-align=\"center\"}\n\n### Other Essential Pseudostates\n\nTo create sophisticated flows, UML provides several other special states (pseudostates):\n\n* **Choice vs. Junction**: These both represent branches in a transition path, but their semantics are critically different. The key distinction is *when* the guards are evaluated relative to the transition's actions.\n\n    * A **Choice** (diamond) models a **dynamic branch**. Its guards are evaluated *after* the actions on the incoming transition segment have been executed.\n    * A **Junction** (circle) models a **static branch**. Its guards are evaluated *before* any actions are executed.\n\n![With a Junction, the path is chosen based on x's initial value. With a Choice, the path is chosen after x has been set to 0.](images/choice-vs-junction.png){fig-alt=\"Side-by-side comparison of a junction and a choice pseudostate, showing different outcomes.\" width=\"40%\" fig-align=\"center\"}\n\n* **History States**: A History State (`H` or `H*`) is a pseudostate that remembers the last active substate of a composite state. This is invaluable for modelling interruptions.\n    * **Shallow History (`H`)**: Remembers only the immediate substate. If `Connected` is left while in the `Running` state, a transition to `H` will resume in `Running`.\n    * **Deep History (`H*`)**: Remembers the full state configuration. If the machine was in the `Fast` sub-state of `Running`, a transition to `H*` would resume in `Fast`.\n\n![A Shallow History (H) connector inside a 'Connected' composite state.](images/shallow-history.png){fig-alt=\"A state diagram showing a shallow history pseudostate (H).\" width=\"80%\" fig-align=\"center\"}\n\n![A Deep History (H*) connector inside a composite state that has its own nested states.](images/deep-history.png){fig-alt=\"A state diagram showing a deep history pseudostate (H*).\" width=\"80%\" fig-align=\"center\"}\n\n* **Entry and Exit Points**: These provide fine-grained control for transitions that cross the boundary of a composite state, allowing them to bypass the default initial/final states.\n    * An **Entry Point** allows a transition to target a specific internal state, useful for skipping initialization steps.\n    * An **Exit Point** allows an internal state to trigger a specific transition out of the composite state, useful for handling specific outcomes like errors.\n\n![An Entry Point allows a higher-level state to transition to a specific substate, bypassing the default initial state.](images/exit-point.png){fig-alt=\"Diagram showing an entry point and an exit point.\" width=\"70%\" fig-align=\"center\"}\n\nBy using these advanced features, State Machine Diagrams can model even the most complex object lifecycles in a structured, understandable, and precise way.\n\n## State Machine Semantics: The Rules of Execution\n\nWhile State Machine diagrams are visually intuitive, their execution follows a precise set of rules, or semantics. Understanding these rules is essential for correctly interpreting complex diagrams and predicting system behaviour, especially when ambiguities like conflicts or concurrency arise.\n\n### Configurations and Conflicts\n\nAt any moment, a system's state is defined by its **configuration**: the set of all currently active states at every level of the hierarchy.\n\nA **conflict** occurs when a single event could trigger multiple different transitions from the current configuration. For two transitions to be in conflict, they must:\n\n* Be triggered by the same event.\n* Have guards that are both true.\n* Originate from source states that overlap (e.g., a state and its substate).\n\n### The UML Priority Rule\n\nTo resolve conflicts, UML defines a clear priority rule: **the transition originating from the most deeply nested state has priority**. This means an action defined on a substate will always be chosen over a conflicting action defined on one of its parent states. It's important to note this is a specific convention of UML, other formalisms might use different rules.\n\n![A complex hierarchical state machine where the \"deepest source state\" rule is needed to resolve which transition fires when event 'a' occurs.](images/semantics-conflict-example.png){fig-alt=\"A hierarchical state machine showing multiple transitions labeled 'a' that could conflict.\" width=\"90%\" fig-align=\"center\"}\n\n### Non-Determinism: When the Rules Aren't Enough\n\nSometimes, the priority rule is not sufficient to resolve all ambiguities. This leads to **non-determinism**, where the model allows for more than one possible correct behaviour.\n\n1.  **Unresolvable Conflicts**: In an orthogonal state, if an event triggers a transition in one region and a conflicting transition in another, the priority rule does not apply because neither state is \"deeper\" than the other. The system will make a non-deterministic choice and fire only one of the enabled transitions.\n\n![In this diagram, if event 'a' occurs, both transitions fire. The final value of 'x' is non-deterministic because the firing order is undefined.](images/semantics-unresolvable.png){fig-alt=\"An orthogonal state machine where two concurrent transitions modify the same variable 'x'.\" width=\"70%\" fig-align=\"center\"}\n\n2.  **Simultaneous Transitions & Undefined Order**: If an event triggers one transition in each of several orthogonal regions, all transitions will fire. However, the **order in which their actions are executed is undefined**. If these actions modify a shared variable, the final value of that variable can be unpredictable, as it depends on which action runs last. More generally, if the actions are sequences like `a;b;c` and `e;f;g`, any interleaving of these sequences is considered a valid execution.\n\n![In this diagram, if event 'a' occurs, both transitions fire. The final value of 'x' is non-deterministic because the firing order is undefined.](images/semantics-non-determinism.png){fig-alt=\"An orthogonal state machine where two concurrent transitions modify the same variable 'x'.\" width=\"70%\" fig-align=\"center\"}\n\n### Semantics of Junctions and Choices\n\nThe distinction between Junction and Choice pseudostates is purely semantic and relates to when guards are evaluated within a single, run-to-completion step:\n\n* **Junction (Static)**: A junction is evaluated \"beforehand.\" The entire path from the source state to the final target state is determined before any actions on the transitions are executed.\n* **Choice (Dynamic)**: A choice is evaluated \"after.\" The system executes the action on the incoming transition segment first, and only then evaluates the guards on the outgoing paths to determine where to go next.\n\n![With a Junction (left), the path is chosen based on x's initial value. With a Choice (right), the path is chosen after x has been set to 0.](images/choice-and-junction.png){fig-alt=\"Side-by-side comparison of a junction and a choice pseudostate.\" width=\"80%\" fig-align=\"center\"}","srcMarkdownNoYaml":"\n\nThis chapter delves into one of UML's core behavioural modelling tools: the **State Machine Diagram**. While Class Diagrams describe a system's static structure, State Machine Diagrams model its dynamic behaviour. They focus on the lifecycle of a single object, detailing the sequence of states it passes through in response to events.\n\n## Why We Need State Machines\n\nClass Diagrams are excellent for defining *what* an object is and *what* it can do (its attributes and operations), but they often fall short in specifying *when* those operations can be called. This temporal ordering, or **protocol**, is crucial for modelling an object's lifecycle.\n\nConsider a simple `Door` object. Its usage is governed by rules:\n\n* A door can only be opened if it is currently closed and unlocked.\n* A door can only be closed if it is open and the doorway is clear.\n* Turning the key locks an unlocked door and unlocks a locked one.\n\nWhile these rules can be described using OCL preconditions, this approach provides a fragmented view and doesn't clearly show how the operations are linked together. State Machine Diagrams excel at visualizing this entire lifecycle in a single, coherent view.\n\n## Core Concepts of State Machines\n\nA State Machine Diagram visualizes an object's behaviour as a journey through a finite number of **states**. It discretizes behaviour into a set of relevant, abstract states, ignoring irrelevant details. For a `Door`, the relevant states might be `Open`, `Closed`, and `Locked`; its color is an irrelevant detail.\n\n![A simple protocol state machine diagram for a Door class.](images/statemachine-door-protocol.png){fig-alt=\"A simple protocol state machine for a Door class showing states like Open, Closed, and Locked.\" width=\"80%\" fig-align=\"center\"}\n\nThe diagram is composed of a few key elements:\n\n* **State:** A condition during the life of an object in which it satisfies some condition, performs some activity, or waits for an event. It's shown as a rectangle with rounded corners.\n* **Transition:** A directed relationship between a source state and a target state. It specifies that an object in the source state will enter the target state when a specific event occurs and certain conditions are met. Transitions are considered instantaneous.\n* **Initial State:** A pseudostate indicating the default starting point. It is shown as a solid black circle.\n* **Final State:** A state indicating that the object has completed its lifecycle. It is shown as a circle surrounding a smaller solid circle (a bullseye).\n\n### Anatomy of a Transition\n\nA transition moves an object from one state to another. Its full syntax is `trigger-event [guard] / effect`. Each part defines a specific aspect of the state change.\n\n![A visual representation of a UML transition, labeling the trigger, guard, and effect components.](images/transition-anatomy.png){fig-alt=\"Anatomy of a UML Transition.\" width=\"15%\" fig-align=\"center\"}\n\n* **Trigger (or Event):** The event that causes the transition to be considered. There are four main types of events:\n\n    * **Call Event:** The most common type. It corresponds to the reception of a **synchronous call** to an operation of the object. The syntax is simply the operation's name, for example, `open()` or `deposit(amount)`.\n\n    * **Signal Event:** Corresponds to the reception of an **asynchronous signal** by an object. Unlike an operation call, the sender does not wait for a reply. The syntax is the signal's name, for example, `onAlarmDetection`.\n\n    * **Change Event:** This event occurs when a specific boolean expression becomes true. It is used to model reactions to changing conditions. The syntax uses the `when` keyword, for example, `when(sensor.isConnected)`.\n\n    * **Time Event:** Occurs after a certain amount of time has passed or at a specific time. The syntax uses the `after` keyword (for a relative duration) or the `at` keyword (for an absolute time). For example, `after(5 seconds)` or `at(2025-12-25)`.\n\n* **Guard:** An optional boolean condition that must be true for the transition to fire. It is written in square brackets, e.g., `[doorway.empty]`.\n\n* **Effect (or Action):** An optional behaviour that is executed at the instant the transition fires.\n\n## Protocol vs. behavioural State Machines\n\nUML distinguishes between two main types of state machines, which serve different purposes.\n\n### Protocol State Machines\n\nA **Protocol State Machine** specifies the legal sequence of operations that can be called on an object. It acts as a \"user manual\" for a class, defining its lifecycle without specifying the implementation of its behaviour. Transitions in a protocol state machine have triggers and guards, but **no effects**.\n\n::: {.callout-note icon=\"true\" title=\"Key Idea: Protocol State Machine\"}\nA Protocol State Machine defines the valid order of operations. It answers the question: \"What can happen next?\" It is primarily used during analysis and interface specification.\n:::\n\nA key question for protocol state machines is what happens when an unexpected event occurs (e.g., a `slam()` event arrives at a `Door`). UML leaves this undefined, meaning it's up to the modeller to specify whether such events are ignored, rejected, or cause an error.\n\n### behavioural State Machines\n\nA **behavioural State Machine** goes further by specifying the object's reactions to events. It models the **effects** (actions or activities) that are executed when transitions occur or when the object is in a particular state.\n\n::: {.callout-note icon=\"true\" title=\"Key Idea: behavioural State Machine\"}\nA behavioural State Machine defines what an object *does* in response to events. It is a specification of implementation and is used during system design and construction.\n:::\n\nIn addition to effects on transitions, states themselves can have associated behaviours:\n\n* **Entry Action:** Executed whenever the state is entered (`entry / action`).\n* **Exit Action:** Executed whenever the state is exited (`exit / action`).\n* **Do Activity:** An ongoing activity performed as long as the object remains in that state (`do / activity`). It can be interrupted by an outgoing transition.\n\n![A behavioural state machine showing entry and exit actions.](images/statemachine-working-entry-exit.png){fig-alt=\"A behavioural state machine with entry/exit actions.\" width=\"50%\" fig-align=\"center\"}\n\nIn contrast to protocol state machines, behavioural state machines have a default behaviour for unexpected events: they are simply **ignored**.\n\n## Advanced Concepts: Structuring Complexity\n\nReal-world objects can have complex behaviours that would lead to messy, unreadable \"flat\" state machines. UML provides powerful structuring mechanisms to manage this complexity.\n\n### Hierarchical States (Composite States)\n\nA **Composite State** is a state that contains its own nested state machine. This allows for abstraction and top-down reasoning. A high-level state like `Working` can be expanded to reveal a detailed sub-machine that handles its internal logic. This is powerful because a single transition leaving the composite state (e.g., `shutdown()`) applies to all of its substates, dramatically reducing visual clutter.\n\n![A composite state 'Working' containing a full sub-machine.](images/statemachine-composite-state-example.png){fig-alt=\"A composite state named Working which contains a nested state machine with states like Off, On, and Diagnosis.\" width=\"80%\"}\n\n### Orthogonal Regions (Concurrency)\n\nAn **Orthogonal State** is a composite state that is divided into two or more independent regions, each with its own sub-machine. When an object is in an orthogonal state, it is simultaneously in one substate from *each* region. This is UML's way of modelling independent, concurrent behaviours within a single object, which avoids a \"combinatorial explosion\" of states.\n\nThe primary mechanism for entering and exiting these concurrent regions is through **Fork** and **Join** pseudostates. A fork splits a single incoming transition into multiple concurrent transitions, one for each region. A join synchronizes multiple incoming transitions from different regions into a single outgoing transition.\n\n![A Fork pseudostate splits one transition into three concurrent paths, which are later synchronized by a Join pseudostate.](images/fork-join.png){fig-alt=\"Diagram of a fork node splitting a transition into three parallel states, and a join node merging them back.\" width=\"50%\" fig-align=\"center\"}\n\n### Other Essential Pseudostates\n\nTo create sophisticated flows, UML provides several other special states (pseudostates):\n\n* **Choice vs. Junction**: These both represent branches in a transition path, but their semantics are critically different. The key distinction is *when* the guards are evaluated relative to the transition's actions.\n\n    * A **Choice** (diamond) models a **dynamic branch**. Its guards are evaluated *after* the actions on the incoming transition segment have been executed.\n    * A **Junction** (circle) models a **static branch**. Its guards are evaluated *before* any actions are executed.\n\n![With a Junction, the path is chosen based on x's initial value. With a Choice, the path is chosen after x has been set to 0.](images/choice-vs-junction.png){fig-alt=\"Side-by-side comparison of a junction and a choice pseudostate, showing different outcomes.\" width=\"40%\" fig-align=\"center\"}\n\n* **History States**: A History State (`H` or `H*`) is a pseudostate that remembers the last active substate of a composite state. This is invaluable for modelling interruptions.\n    * **Shallow History (`H`)**: Remembers only the immediate substate. If `Connected` is left while in the `Running` state, a transition to `H` will resume in `Running`.\n    * **Deep History (`H*`)**: Remembers the full state configuration. If the machine was in the `Fast` sub-state of `Running`, a transition to `H*` would resume in `Fast`.\n\n![A Shallow History (H) connector inside a 'Connected' composite state.](images/shallow-history.png){fig-alt=\"A state diagram showing a shallow history pseudostate (H).\" width=\"80%\" fig-align=\"center\"}\n\n![A Deep History (H*) connector inside a composite state that has its own nested states.](images/deep-history.png){fig-alt=\"A state diagram showing a deep history pseudostate (H*).\" width=\"80%\" fig-align=\"center\"}\n\n* **Entry and Exit Points**: These provide fine-grained control for transitions that cross the boundary of a composite state, allowing them to bypass the default initial/final states.\n    * An **Entry Point** allows a transition to target a specific internal state, useful for skipping initialization steps.\n    * An **Exit Point** allows an internal state to trigger a specific transition out of the composite state, useful for handling specific outcomes like errors.\n\n![An Entry Point allows a higher-level state to transition to a specific substate, bypassing the default initial state.](images/exit-point.png){fig-alt=\"Diagram showing an entry point and an exit point.\" width=\"70%\" fig-align=\"center\"}\n\nBy using these advanced features, State Machine Diagrams can model even the most complex object lifecycles in a structured, understandable, and precise way.\n\n## State Machine Semantics: The Rules of Execution\n\nWhile State Machine diagrams are visually intuitive, their execution follows a precise set of rules, or semantics. Understanding these rules is essential for correctly interpreting complex diagrams and predicting system behaviour, especially when ambiguities like conflicts or concurrency arise.\n\n### Configurations and Conflicts\n\nAt any moment, a system's state is defined by its **configuration**: the set of all currently active states at every level of the hierarchy.\n\nA **conflict** occurs when a single event could trigger multiple different transitions from the current configuration. For two transitions to be in conflict, they must:\n\n* Be triggered by the same event.\n* Have guards that are both true.\n* Originate from source states that overlap (e.g., a state and its substate).\n\n### The UML Priority Rule\n\nTo resolve conflicts, UML defines a clear priority rule: **the transition originating from the most deeply nested state has priority**. This means an action defined on a substate will always be chosen over a conflicting action defined on one of its parent states. It's important to note this is a specific convention of UML, other formalisms might use different rules.\n\n![A complex hierarchical state machine where the \"deepest source state\" rule is needed to resolve which transition fires when event 'a' occurs.](images/semantics-conflict-example.png){fig-alt=\"A hierarchical state machine showing multiple transitions labeled 'a' that could conflict.\" width=\"90%\" fig-align=\"center\"}\n\n### Non-Determinism: When the Rules Aren't Enough\n\nSometimes, the priority rule is not sufficient to resolve all ambiguities. This leads to **non-determinism**, where the model allows for more than one possible correct behaviour.\n\n1.  **Unresolvable Conflicts**: In an orthogonal state, if an event triggers a transition in one region and a conflicting transition in another, the priority rule does not apply because neither state is \"deeper\" than the other. The system will make a non-deterministic choice and fire only one of the enabled transitions.\n\n![In this diagram, if event 'a' occurs, both transitions fire. The final value of 'x' is non-deterministic because the firing order is undefined.](images/semantics-unresolvable.png){fig-alt=\"An orthogonal state machine where two concurrent transitions modify the same variable 'x'.\" width=\"70%\" fig-align=\"center\"}\n\n2.  **Simultaneous Transitions & Undefined Order**: If an event triggers one transition in each of several orthogonal regions, all transitions will fire. However, the **order in which their actions are executed is undefined**. If these actions modify a shared variable, the final value of that variable can be unpredictable, as it depends on which action runs last. More generally, if the actions are sequences like `a;b;c` and `e;f;g`, any interleaving of these sequences is considered a valid execution.\n\n![In this diagram, if event 'a' occurs, both transitions fire. The final value of 'x' is non-deterministic because the firing order is undefined.](images/semantics-non-determinism.png){fig-alt=\"An orthogonal state machine where two concurrent transitions modify the same variable 'x'.\" width=\"70%\" fig-align=\"center\"}\n\n### Semantics of Junctions and Choices\n\nThe distinction between Junction and Choice pseudostates is purely semantic and relates to when guards are evaluated within a single, run-to-completion step:\n\n* **Junction (Static)**: A junction is evaluated \"beforehand.\" The entire path from the source state to the final target state is determined before any actions on the transitions are executed.\n* **Choice (Dynamic)**: A choice is evaluated \"after.\" The system executes the action on the incoming transition segment first, and only then evaluates the guards on the outgoing paths to determine where to go next.\n\n![With a Junction (left), the path is chosen based on x's initial value. With a Choice (right), the path is chosen after x has been set to 0.](images/choice-and-junction.png){fig-alt=\"Side-by-side comparison of a junction and a choice pseudostate.\" width=\"80%\" fig-align=\"center\"}"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"08-state-machine-diagrams.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","bibliography":["references.bib"],"output-dir":"docs","theme":["cosmo","brand"],"title":"State Machine Diagrams"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"08-state-machine-diagrams.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"output-dir":"docs","documentclass":"scrreprt","title":"State Machine Diagrams"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}