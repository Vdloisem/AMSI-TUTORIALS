{"title":"Practical Exercises: State Machines","markdown":{"yaml":{"title":"Practical Exercises: State Machines"},"headingText":"Exercise 1: Orthogonal Regions and History","containsRefs":false,"markdown":"\n\nThis chapter provides a series of practical exercises to apply the concepts of UML State Machines discussed previously. Each exercise challenges you to trace the execution of a complex state machine by applying semantic rules to determine the stable configuration after each event.\n\n---\n\n\n**Problem:**\nConsider the state machine diagram below. Starting from the initial configuration `{A}`, trace the system's configuration through the given sequence of events.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![State Machine for Exercise 1.](images/tp-ex1-statemachine.png){fig-alt=\"A state machine with a composite state B containing two orthogonal regions.\"}\n\n**Correction Details:**\n\n| Step | Initial Config. | Event | Final Config. | Justification                                                                                                                                                             |\n|:-----|:----------------|:------|:--------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1    | `{A}`           | y     | `{B,C,E}`     | `A -> B` is the only possible transition; `C` and `E` are entered via the fork.                                                                                             |\n| 2    | `{B,C,E}`       | u     | `{B,D,F}`     | The `C -> D` transition fires. Its reaction sends a `q` event, which is consumed. The system enters `D`. Because the `in(D)` guard is now true, a transition to `F` is taken. The final stable state is `{B,D,F}`. |\n| 3    | `{B,D,F}`       | q     | `{B,D,F}`     | The system leaves `F` for `E`. Since it is still in state `D`, the `in(D)` guard is true, causing an immediate transition back to `F` for a stable state of `{B,D,F}`.   |\n| 4    | `{B,D,F}`       | t     | `{B,C,F}`     | The system remains in `B`. The `D -> C` transition occurs. The system remains in `F`.                                                                                     |\n| 5    | `{B,C,F}`       | q     | `{B,C,E}`     | The system remains in `B`. The `F -> E` transition occurs. The system remains in `C`.                                                                                     |\n| 6    | `{B,C,E}`       | s     | `{B,C,E}`     | The system leaves `B` and re-enters it. `C` is restored because of the History state (`H`). `E` is activated because it's the initial state of its region.               |\n| 7    | `{B,C,E}`       | u     | `{B,D,F}`     | Same as step 2.                                                                                                                                                           |\n| 8    | `{B,D,F}`       | s     | `{B,D,F}`     | The system leaves `B` and re-enters it. `D` is restored due to History. `E` is activated as the initial state, but an immediate transition to `F` occurs because the `in(D)` guard is true. |\n| 9    | `{B,D,F}`       | t     | `{B,C,F}`     | The system remains in `B`. The `D -> C` transition occurs. The system remains in `F`.                                                                                     |\n| 10   | `{B,C,F}`       | v     | `{G}`         | The system leaves `B` for `G`. This is enabled by the exit point, as the active state `C` is connected to it.                                                             |\n**Key Concepts Illustrated:**\n\n* **Orthogonal Regions:** Modeling concurrent states that are active simultaneously.\n* **Run-to-Completion Semantics:** How an event and its subsequent internal reactions are processed to completion before the next external event is handled.\n* **Shallow History (`H`):** The mechanism for remembering and restoring the last active substate within a region.\n* **Forks and Exit Points:** The syntax and semantics for managing the start and end of concurrent flows.\n\n:::\n\n---\n\n### Exercise 2: Submachines and Deep History\n\n**Problem:**\nConsider the state machine `Z`, which uses the submachine `C`. Starting from the initial configuration `{Z, A, B}`, trace the system's configuration for the given event sequence.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![State Machine and Submachine for Exercise 2.](images/tp-ex2-statemachine.png){fig-alt=\"A complex state machine Z with a reference to a submachine C.\"}\n\n**Correction Details:**\n\n| Step | Initial Config.     | Event | Final Config.     | Justification                                                                                                                                                                             |\n|:-----|:--------------------|:------|:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1    | `{Z, A, B}`         | s     | `{Z, A, C, D}`    | `A` remains active; the `B -> C` transition occurs; `D` is the initial state of the submachine `C`.                                                                                       |\n| 2    | `{Z, A, C, D}`      | u     | `{Z, A, C, E}`    | The `D -> E` transition occurs. `E` is an exit state that enables the `A -> G` transition.                                                                                                  |\n| 3    | `{Z, A, C, E}`      | r     | `{Z, A, C, E}`    | Nothing happens.                                                                                                                                                                          |\n| 4    | `{Z, A, C, E}`      | u     | `{Z, G, I, J, M}` | The `A -> G` transition fires via the active exit point. `I` and `J` are activated as initial states in the top region, and `M` is the initial state of the bottom orthogonal region.       |\n| 5    | `{Z, G, I, J, M}`   | x     | `{Z, G, L, N}`    | The `I -> L` transition fires, launching and consuming event `w`. The `in(L)` guard is now true, so the `M -> N` transition also fires.                           |\n| 6    | `{Z, G, L, N}`      | v     | `{Z, G, I, J, N}` | `Z` and `G` remain active. The `L -> I` transition fires. `J` is restored because of the deep history state (`H*`).                                                                       |\n| 7    | `{Z, G, I, J, N}`   | z     | `{Z, G, I, J, N}` | Nothing happens.                                                                                                                                                            |\n| 8    | `{Z, G, I, J, N}`   | y     | `{Z, G, I, K, N}` | The `J -> K` transition occurs.                                                                                                                                                                           |\n| 9    | `{Z, G, I, K, N}`   | t     | `{Z, A, C, D}`    | The system leaves `G` for `A`. `C` is restored due to shallow history (`H`). `D` is activated as the initial state of `C` because the history of `A` is not deep.                           |\n| 10   | `{Z, A, C, D}`      | u     | `{Z, A, C, E}`    | Same as step 2.                                                                                                                                                                           |\n| 11   | `{Z, A, C, E}`      | u     | `{Z, G, I, K, N}` | The system leaves `A` for `G` via the exit point. In the top region, `{I, K}` is restored due to deep history. In the bottom region, `N` is restored due to its shallow history.            |\n| 12   | `{Z, G, I, K, N}`   | x     | `{Z, G, L, N}`    | The `I -> L` transition fires, launching event `w`. This `w` event causes `N -> M`. The system enters `L`, making the `in(L)` guard true, which causes an immediate `M -> N` transition. The final stable state is `{Z, G, L, N}`. |\n\n**Key Concepts Illustrated:**\n\n* **Submachine States:** How a state can be a reference to another, reusable state machine definition, promoting encapsulation.\n* **Deep History (`H*`) vs. Shallow History (`H`):** This exercise provides a perfect side-by-side comparison. Shallow history restores the immediate substate, while deep history restores the entire nested configuration.\n* **Interaction between Model Components:** Tracing how transitions and history mechanisms work across the boundaries of composite states and submachines.\n\n:::\n\n---\n\n### Exercise 3: Advanced Semantics and Priority Rules\n\n**Problem:**\nFor the highly complex state machine below, trace the configuration starting from `{A, B, F, H}`. This exercise will test your understanding of conflict resolution.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![State Machine for Exercise 3.](images/tp-ex3-statemachine.png){fig-alt=\"A very complex hierarchical and orthogonal state machine.\"}\n\n**Correction Details:**\n\n| No. | Initial Config. | Event     | Final Config. | Justification                                                                                                                                                                                                                                                                             |\n|:----|:----------------|:----------|:--------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1   | `{A, B, F, H}`  | m1        | `{A, B, F, H}`| The system leaves `A` and re-enters it. `B` is the initial state, `F` is restored due to History, and `H` is the initial state.                                                                                                                                                              |\n| 2   | `{A, B, F, H}`  | `m2/m3`   | `{A, B, G, H}`| `m2` is the event, `m3` is the reaction. The `F -> G` transition fires, launching `m3`. A conflict arises between the high-level `B -> C` transition and the nested `H -> H` self-transition. The `H -> H` transition has priority because it is more deeply nested. `m3` is consumed, and the final stable state is `{A, B, G, H}`. |\n| 3   | `{A, B, G, H}`  | m4        | `{A, D}`      | The `B -> D` transition occurs.                                                                                                                                                                                                                                                           |\n| 4   | `{A, D}`        | m4        | `{A, B, G, H}`| The `D -> B` transition occurs. `G` is restored due to history, and `H` is activated as the initial state.                                                                                                                                                                                  |\n| 5   | `{A, B, G, H}`  | m3        | `{A, B, G, H}`| The system leaves `H` and re-enters it; the `H -> H` transition is the most deeply nested and thus has priority.                                                                                                                                                                         |\n| 6   | `{A, B, G, H}`  | m1        | `{A, B, F, H}`| The `G -> F` transition is the most deeply nested.                                                                                                                                                                                                                                        |\n| 7   | `{A, B, F, H}`  | m1        | `{A, B, F, H}`| The system leaves `A` and re-enters it. `B` is the initial state, `F` is restored due to History, and `H` is the initial state.                                                                                                                                                              |\n| 8   | `{A, B, F, H}`  | m8        | `{A, B, F, H}`| Nothing happens.                                                                                                                                                                                                                                                                          |\n| 9   | `{A, B, F, H}`  | `m3/m8`   | `{A, B, F, H}`| The system leaves `H` and re-enters it. The `H -> H` transition is the most deeply nested (the reaction `m8` is not considered here).                                                                                                                                                     |\n| 10  | `{A, B, F, H}`  | m1        | `{A, B, F, H}`| Same as step 7.                                                                                                                                                                                                                                                                           |`. The top-right region has no history and resets to its initial state `H`.\n\n**Key Concepts Illustrated:**\n\n* **The UML Priority Rule:** This exercise provides a clear, practical example of conflict resolution. The rule—\"deepest source state wins\"—is not just theoretical; it dictates the machine's behavior.\n* **Reactions and Internal Events:** Demonstrates how a transition's action can trigger a new event that is immediately processed within the same \"run-to-completion\" step.\n* **Complex Transitions:** Shows how to trace execution across multiple levels of hierarchy and through exit points that depend on the configuration of multiple orthogonal regions.\n\n:::\n","srcMarkdownNoYaml":"\n\nThis chapter provides a series of practical exercises to apply the concepts of UML State Machines discussed previously. Each exercise challenges you to trace the execution of a complex state machine by applying semantic rules to determine the stable configuration after each event.\n\n---\n\n### Exercise 1: Orthogonal Regions and History\n\n**Problem:**\nConsider the state machine diagram below. Starting from the initial configuration `{A}`, trace the system's configuration through the given sequence of events.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![State Machine for Exercise 1.](images/tp-ex1-statemachine.png){fig-alt=\"A state machine with a composite state B containing two orthogonal regions.\"}\n\n**Correction Details:**\n\n| Step | Initial Config. | Event | Final Config. | Justification                                                                                                                                                             |\n|:-----|:----------------|:------|:--------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1    | `{A}`           | y     | `{B,C,E}`     | `A -> B` is the only possible transition; `C` and `E` are entered via the fork.                                                                                             |\n| 2    | `{B,C,E}`       | u     | `{B,D,F}`     | The `C -> D` transition fires. Its reaction sends a `q` event, which is consumed. The system enters `D`. Because the `in(D)` guard is now true, a transition to `F` is taken. The final stable state is `{B,D,F}`. |\n| 3    | `{B,D,F}`       | q     | `{B,D,F}`     | The system leaves `F` for `E`. Since it is still in state `D`, the `in(D)` guard is true, causing an immediate transition back to `F` for a stable state of `{B,D,F}`.   |\n| 4    | `{B,D,F}`       | t     | `{B,C,F}`     | The system remains in `B`. The `D -> C` transition occurs. The system remains in `F`.                                                                                     |\n| 5    | `{B,C,F}`       | q     | `{B,C,E}`     | The system remains in `B`. The `F -> E` transition occurs. The system remains in `C`.                                                                                     |\n| 6    | `{B,C,E}`       | s     | `{B,C,E}`     | The system leaves `B` and re-enters it. `C` is restored because of the History state (`H`). `E` is activated because it's the initial state of its region.               |\n| 7    | `{B,C,E}`       | u     | `{B,D,F}`     | Same as step 2.                                                                                                                                                           |\n| 8    | `{B,D,F}`       | s     | `{B,D,F}`     | The system leaves `B` and re-enters it. `D` is restored due to History. `E` is activated as the initial state, but an immediate transition to `F` occurs because the `in(D)` guard is true. |\n| 9    | `{B,D,F}`       | t     | `{B,C,F}`     | The system remains in `B`. The `D -> C` transition occurs. The system remains in `F`.                                                                                     |\n| 10   | `{B,C,F}`       | v     | `{G}`         | The system leaves `B` for `G`. This is enabled by the exit point, as the active state `C` is connected to it.                                                             |\n**Key Concepts Illustrated:**\n\n* **Orthogonal Regions:** Modeling concurrent states that are active simultaneously.\n* **Run-to-Completion Semantics:** How an event and its subsequent internal reactions are processed to completion before the next external event is handled.\n* **Shallow History (`H`):** The mechanism for remembering and restoring the last active substate within a region.\n* **Forks and Exit Points:** The syntax and semantics for managing the start and end of concurrent flows.\n\n:::\n\n---\n\n### Exercise 2: Submachines and Deep History\n\n**Problem:**\nConsider the state machine `Z`, which uses the submachine `C`. Starting from the initial configuration `{Z, A, B}`, trace the system's configuration for the given event sequence.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![State Machine and Submachine for Exercise 2.](images/tp-ex2-statemachine.png){fig-alt=\"A complex state machine Z with a reference to a submachine C.\"}\n\n**Correction Details:**\n\n| Step | Initial Config.     | Event | Final Config.     | Justification                                                                                                                                                                             |\n|:-----|:--------------------|:------|:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1    | `{Z, A, B}`         | s     | `{Z, A, C, D}`    | `A` remains active; the `B -> C` transition occurs; `D` is the initial state of the submachine `C`.                                                                                       |\n| 2    | `{Z, A, C, D}`      | u     | `{Z, A, C, E}`    | The `D -> E` transition occurs. `E` is an exit state that enables the `A -> G` transition.                                                                                                  |\n| 3    | `{Z, A, C, E}`      | r     | `{Z, A, C, E}`    | Nothing happens.                                                                                                                                                                          |\n| 4    | `{Z, A, C, E}`      | u     | `{Z, G, I, J, M}` | The `A -> G` transition fires via the active exit point. `I` and `J` are activated as initial states in the top region, and `M` is the initial state of the bottom orthogonal region.       |\n| 5    | `{Z, G, I, J, M}`   | x     | `{Z, G, L, N}`    | The `I -> L` transition fires, launching and consuming event `w`. The `in(L)` guard is now true, so the `M -> N` transition also fires.                           |\n| 6    | `{Z, G, L, N}`      | v     | `{Z, G, I, J, N}` | `Z` and `G` remain active. The `L -> I` transition fires. `J` is restored because of the deep history state (`H*`).                                                                       |\n| 7    | `{Z, G, I, J, N}`   | z     | `{Z, G, I, J, N}` | Nothing happens.                                                                                                                                                            |\n| 8    | `{Z, G, I, J, N}`   | y     | `{Z, G, I, K, N}` | The `J -> K` transition occurs.                                                                                                                                                                           |\n| 9    | `{Z, G, I, K, N}`   | t     | `{Z, A, C, D}`    | The system leaves `G` for `A`. `C` is restored due to shallow history (`H`). `D` is activated as the initial state of `C` because the history of `A` is not deep.                           |\n| 10   | `{Z, A, C, D}`      | u     | `{Z, A, C, E}`    | Same as step 2.                                                                                                                                                                           |\n| 11   | `{Z, A, C, E}`      | u     | `{Z, G, I, K, N}` | The system leaves `A` for `G` via the exit point. In the top region, `{I, K}` is restored due to deep history. In the bottom region, `N` is restored due to its shallow history.            |\n| 12   | `{Z, G, I, K, N}`   | x     | `{Z, G, L, N}`    | The `I -> L` transition fires, launching event `w`. This `w` event causes `N -> M`. The system enters `L`, making the `in(L)` guard true, which causes an immediate `M -> N` transition. The final stable state is `{Z, G, L, N}`. |\n\n**Key Concepts Illustrated:**\n\n* **Submachine States:** How a state can be a reference to another, reusable state machine definition, promoting encapsulation.\n* **Deep History (`H*`) vs. Shallow History (`H`):** This exercise provides a perfect side-by-side comparison. Shallow history restores the immediate substate, while deep history restores the entire nested configuration.\n* **Interaction between Model Components:** Tracing how transitions and history mechanisms work across the boundaries of composite states and submachines.\n\n:::\n\n---\n\n### Exercise 3: Advanced Semantics and Priority Rules\n\n**Problem:**\nFor the highly complex state machine below, trace the configuration starting from `{A, B, F, H}`. This exercise will test your understanding of conflict resolution.\n\n::: {.callout-tip collapse=\"true\" title=\"Click to see the solution\"}\n\n![State Machine for Exercise 3.](images/tp-ex3-statemachine.png){fig-alt=\"A very complex hierarchical and orthogonal state machine.\"}\n\n**Correction Details:**\n\n| No. | Initial Config. | Event     | Final Config. | Justification                                                                                                                                                                                                                                                                             |\n|:----|:----------------|:----------|:--------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1   | `{A, B, F, H}`  | m1        | `{A, B, F, H}`| The system leaves `A` and re-enters it. `B` is the initial state, `F` is restored due to History, and `H` is the initial state.                                                                                                                                                              |\n| 2   | `{A, B, F, H}`  | `m2/m3`   | `{A, B, G, H}`| `m2` is the event, `m3` is the reaction. The `F -> G` transition fires, launching `m3`. A conflict arises between the high-level `B -> C` transition and the nested `H -> H` self-transition. The `H -> H` transition has priority because it is more deeply nested. `m3` is consumed, and the final stable state is `{A, B, G, H}`. |\n| 3   | `{A, B, G, H}`  | m4        | `{A, D}`      | The `B -> D` transition occurs.                                                                                                                                                                                                                                                           |\n| 4   | `{A, D}`        | m4        | `{A, B, G, H}`| The `D -> B` transition occurs. `G` is restored due to history, and `H` is activated as the initial state.                                                                                                                                                                                  |\n| 5   | `{A, B, G, H}`  | m3        | `{A, B, G, H}`| The system leaves `H` and re-enters it; the `H -> H` transition is the most deeply nested and thus has priority.                                                                                                                                                                         |\n| 6   | `{A, B, G, H}`  | m1        | `{A, B, F, H}`| The `G -> F` transition is the most deeply nested.                                                                                                                                                                                                                                        |\n| 7   | `{A, B, F, H}`  | m1        | `{A, B, F, H}`| The system leaves `A` and re-enters it. `B` is the initial state, `F` is restored due to History, and `H` is the initial state.                                                                                                                                                              |\n| 8   | `{A, B, F, H}`  | m8        | `{A, B, F, H}`| Nothing happens.                                                                                                                                                                                                                                                                          |\n| 9   | `{A, B, F, H}`  | `m3/m8`   | `{A, B, F, H}`| The system leaves `H` and re-enters it. The `H -> H` transition is the most deeply nested (the reaction `m8` is not considered here).                                                                                                                                                     |\n| 10  | `{A, B, F, H}`  | m1        | `{A, B, F, H}`| Same as step 7.                                                                                                                                                                                                                                                                           |`. The top-right region has no history and resets to its initial state `H`.\n\n**Key Concepts Illustrated:**\n\n* **The UML Priority Rule:** This exercise provides a clear, practical example of conflict resolution. The rule—\"deepest source state wins\"—is not just theoretical; it dictates the machine's behavior.\n* **Reactions and Internal Events:** Demonstrates how a transition's action can trigger a new event that is immediately processed within the same \"run-to-completion\" step.\n* **Complex Transitions:** Shows how to trace execution across multiple levels of hierarchy and through exit points that depend on the configuration of multiple orthogonal regions.\n\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"09-practical-exercises-state-machine-diagrams.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","bibliography":["references.bib"],"output-dir":"docs","theme":["cosmo","brand"],"title":"Practical Exercises: State Machines"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"09-practical-exercises-state-machine-diagrams.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"output-dir":"docs","documentclass":"scrreprt","title":"Practical Exercises: State Machines"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}